<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:int="http://www.springframework.org/schema/integration"
   xmlns:int-kafka="http://www.springframework.org/schema/integration/kafka"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                             http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
                            http://www.springframework.org/schema/integration/kafka http://www.springframework.org/schema/integration/kafka/spring-integration-kafka.xsd">

   <int:channel id="fromKafkaChannel" />
   <int:publish-subscribe-channel id="toKafkaChannel"/>
   <int:publish-subscribe-channel id="toKafkaP1Channel"/>
   <int:publish-subscribe-channel id="toKafkaP2Channel"/>
   <int:publish-subscribe-channel id="toKafkaP3Channel"/>
   <int:publish-subscribe-channel id="toKafkaP4Channel"/>
   <int:publish-subscribe-channel id="partitionedKafkaChannel"/>

   <int:transformer input-channel="toKafkaChannel" output-channel="partitionedKafkaChannel" ref="partitioner" method="roundRobbin" />


  <int:header-value-router input-channel="partitionedKafkaChannel" header-name="partitionId" default-output-channel="toKafkaP4Channel">
     <int:mapping value="0" channel="toKafkaP1Channel" />
     <int:mapping value="1" channel="toKafkaP2Channel" />
     <int:mapping value="2" channel="toKafkaP3Channel" />
  </int:header-value-router>

   <int-kafka:outbound-channel-adapter partition-id="0" kafka-template="kafkaTemplate" id="kafkaOutbound0" channel="toKafkaP1Channel" topic="${broker.topic}" />
   <int-kafka:outbound-channel-adapter partition-id="1" kafka-template="kafkaTemplate" id="kafkaOutbound1" channel="toKafkaP2Channel" topic="${broker.topic}"/>
   <int-kafka:outbound-channel-adapter partition-id="2" kafka-template="kafkaTemplate" id="kafkaOutbound2" channel="toKafkaP3Channel" topic="${broker.topic}"/>
   <int-kafka:outbound-channel-adapter partition-id="3" kafka-template="kafkaTemplate" id="kafkaOutbound3" channel="toKafkaP4Channel" topic="${broker.topic}"/>

   <int-kafka:message-driven-channel-adapter listener-container="kafkaListenerContainer" id="kafkaListener" auto-startup="true" phase="0" send-timeout="10000" channel="fromKafkaChannel" message-converter="messageConverter" error-channel="errorChannel" />

   <int:service-activator input-channel="fromKafkaChannel" ref="consumer" method="consume" />

   <bean id="consumer" class="br.com.cinq.kafka.sample.kafka.consumer.ConsumerPojo" />

<!--    <int-kafka:outbound-channel-adapter kafka-template="" kafka-producer-context-ref="kafkaProducerContext" auto-startup="true" channel="toKafkaChannel" order="1"></int-kafka:outbound-channel-adapter> -->

<!--    <task:executor id="taskExecutor" pool-size="5" keep-alive="120" queue-capacity="500"/> -->

<!--    <bean id="kafkaReflectionEncoder" class="org.springframework.integration.kafka.serializer.avro.AvroReflectDatumBackedKafkaEncoder"> -->
<!--       <constructor-arg value="java.lang.String" /> -->
<!--    </bean> -->

<!--    <bean id="kafkaSpecificEncoder" class="org.springframework.integration.kafka.serializer.avro.AvroSpecificDatumBackedKafkaEncoder"> -->
<!--       <constructor-arg value="java.lang.String" /> -->
<!--    </bean> -->

<!--    <int-kafka:producer-context id="kafkaProducerContext" producer-properties="producerProperties"> -->
<!--       <int-kafka:producer-configurations> -->
<!--          <int-kafka:producer-configuration  key-class-type="java.lang.String" key-encoder="kafkaReflectionEncoder" value-encoder="kafkaSpecificEncoder" broker-list="${broker.bootstrapServer}" value-class-type="java.lang.String" topic="${broker.topic}" partitioner="customPartitioner" /> -->
<!--       </int-kafka:producer-configurations> -->
<!--    </int-kafka:producer-context> -->

<!--    <bean id="customPartitioner" class=" br.com.cinq.kafka.sample.kafka.consumer.CustomPartitioner"/> -->

<!--    <int-kafka:zookeeper-connect id="zookeeperConnect" zk-connect="${broker.zookeeperServer}" zk-connection-timeout="6000" zk-session-timeout="6000" zk-sync-time="2000"/> -->

<!--    <int-kafka:inbound-channel-adapter group-id="sik1" id="kafkaInboundChannelAdapter" kafka-consumer-context-ref="consumerContext" auto-startup="false" channel="fromKafkaChannel"> -->
<!--       <int:poller fixed-delay="1" time-unit="MILLISECONDS"/> -->
<!--    </int-kafka:inbound-channel-adapter> -->

<!--    <int-kafka:consumer-context id="consumerContext" consumer-timeout="1000" zookeeper-connect="zookeeperConnect" consumer-properties="consumerProperties"> -->
<!--       <int-kafka:consumer-configurations> -->
   <!--                value-decoder="kafkaSpecificDecoder" -->
   <!--                key-decoder="kafkaReflectionDecoder" -->
<!--          <int-kafka:consumer-configuration group-id="sik1" max-messages="15"> -->
<!--             <int-kafka:topic id="${broker.topic}" streams="2"/> -->
<!--          </int-kafka:consumer-configuration> -->
<!--       </int-kafka:consumer-configurations> -->
<!--    </int-kafka:consumer-context> -->

<!--    <bean id="consumerProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> -->
<!--       <property name="properties"> -->
<!--          <props> -->
<!--             <prop key="auto.offset.reset">smallest</prop> -->
<!--             <prop key="socket.receive.buffer.bytes">10485760</prop> 10M -->
<!--             <prop key="fetch.message.max.bytes">5242880</prop> -->
<!--             <prop key="auto.commit.interval.ms">1000</prop> -->
<!--          </props> -->
<!--       </property> -->
<!--    </bean> -->

<!--    <bean id="producerProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean"> -->
<!--       <property name="properties"> -->
<!--          <props> -->
<!--             <prop key="topic.metadata.refresh.interval.ms">3600000</prop> -->
<!--             <prop key="message.send.max.retries">5</prop> -->
<!--             <prop key="send.buffer.bytes">5242880</prop> -->
<!--          </props> -->
<!--       </property> -->
<!--    </bean> -->

</beans>
